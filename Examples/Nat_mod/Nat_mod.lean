import Tactic.replace_R

import Tactic.map2

def R : Nat → Nat → Prop := fun n₁ n₂ => ∃ m, n₁ % m = n₂ % m ∧ m = 0

-- Setoid instance here:
instance R_Setoid : Setoid Nat :=
  { r := R
    iseqv :=
      { refl :=
          by
          unfold R
          aesop
        symm :=
          by
          unfold R
          aesop
        trans :=
          by
          unfold R
          aesop
                }
                  }

--User-given:
-- @[map₂]
def add_resp : ∀ ⦃a₁ a₂ : Nat⦄, R a₁ a₂ → ∀ ⦃b₁ b₂ : Nat⦄, R b₁ b₂ → R (Nat.add a₁ b₁) (Nat.add a₂ b₂)
  :=
  by
  unfold R
  intro a₁ a₂ h1 b₁ b₂ h2
  simp only [exists_eq_right, Nat.mod_zero] at *
  aesop

-- Autogenerated from "@[map₂]" tag:
def add'
  := Quotient.map₂ (@Nat.add) (@add_resp)
def add'_mk : (x y : Nat) → ⟦Nat.add x y⟧ = @add' ⟦x⟧ ⟦y⟧
  := fun x y => (Quotient.map₂_mk (@Nat.add) (@add_resp) x y).symm


example : (a b c : Nat) → (R a a) ∧ (R a b → R b a) ∧ (R a b → R b c → R a c) :=
  by
  intro a b c
  /-
  repeat any_goals apply And.intro
  all_goals unfold R ; aesop
  -/
  replace_R R R_Setoid
  grind

example : (x y : Nat) → R x y →  R (x.add (x.add (x.add (x.add y)))) (y.add (y.add (y.add (y.add x)))) :=
  by
  /-
  intro x y xRy
  repeat any_goals apply add_resp
  all_goals unfold R at * ; aesop
  -/
  replace_R R R_Setoid
  simp only [add'_mk]
  grind
